/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

import { get_description } from '../scripts/get_description.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[15] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i].page;
	child_ctx[17] = list[i].name;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	child_ctx[15] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i].page;
	child_ctx[17] = list[i].name;
	return child_ctx;
}

// (20:0) {#if complete}
function create_if_block_6(ctx) {
	let li;
	let t0;
	let t1;

	return {
		c() {
			li = element("li");
			t0 = text("Created: ");
			t1 = text(/*dateCreated*/ ctx[6]);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, "Created: ");
			t1 = claim_text(li_nodes, /*dateCreated*/ ctx[6]);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(li, "class", "mr-2 my-0 inline-flex");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t0);
			append(li, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (28:0) {#if complete}
function create_if_block_1(ctx) {
	let br;
	let t0;
	let li0;
	let t1;
	let t2;
	let li1;
	let t3;
	let each_value_2 = /*catgs*/ ctx[9];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value = /*tags*/ ctx[8];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			br = element("br");
			t0 = space();
			li0 = element("li");
			t1 = text("Categories:\n    ");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = space();
			li1 = element("li");
			t3 = text("Tags:\n    ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			br = claim_element(nodes, "BR", {});
			t0 = claim_space(nodes);
			li0 = claim_element(nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			t1 = claim_text(li0_nodes, "Categories:\n    ");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(li0_nodes);
			}

			li0_nodes.forEach(detach);
			t2 = claim_space(nodes);
			li1 = claim_element(nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			t3 = claim_text(li1_nodes, "Tags:\n    ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(li1_nodes);
			}

			li1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(li0, "class", "mr-2 my-0 inline-flex");
			attr(li1, "class", "mr-2 my-0 inline-flex");
		},
		m(target, anchor) {
			insert(target, br, anchor);
			insert(target, t0, anchor);
			insert(target, li0, anchor);
			append(li0, t1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(li0, null);
			}

			insert(target, t2, anchor);
			insert(target, li1, anchor);
			append(li1, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(li1, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*Object, catgPosts, catgs*/ 513) {
				each_value_2 = /*catgs*/ ctx[9];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(li0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			if (dirty & /*Object, tagsPosts, tags*/ 258) {
				each_value = /*tags*/ ctx[8];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(li1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(br);
			if (detaching) detach(t0);
			if (detaching) detach(li0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach(t2);
			if (detaching) detach(li1);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (34:8) {#if catg == name}
function create_if_block_4(ctx) {
	let a;
	let t0_value = /*name*/ ctx[17] + "";
	let t0;
	let t1;
	let a_href_value;
	let if_block = /*i*/ ctx[15] < /*catgs*/ ctx[9].length - 1 && create_if_block_5(ctx);

	return {
		c() {
			a = element("a");
			t0 = text(t0_value);
			if (if_block) if_block.c();
			t1 = space();
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			if (if_block) if_block.l(a_nodes);
			t1 = claim_space(a_nodes);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = "catgs/" + /*page*/ ctx[16]);
			attr(a, "class", "ml-0.5");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t0);
			if (if_block) if_block.m(a, null);
			append(a, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*catgPosts*/ 1 && t0_value !== (t0_value = /*name*/ ctx[17] + "")) set_data(t0, t0_value);

			if (dirty & /*catgPosts*/ 1 && a_href_value !== (a_href_value = "catgs/" + /*page*/ ctx[16])) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d();
		}
	};
}

// (36:18) {#if i < catgs.length - 1}
function create_if_block_5(ctx) {
	let t;

	return {
		c() {
			t = text(",");
		},
		l(nodes) {
			t = claim_text(nodes, ",");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (33:6) {#each Object(catgPosts) as { page, name }}
function create_each_block_3(ctx) {
	let if_block_anchor;
	let if_block = /*catg*/ ctx[20] == /*name*/ ctx[17] && create_if_block_4(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*catg*/ ctx[20] == /*name*/ ctx[17]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (32:4) {#each catgs as catg, i}
function create_each_block_2(ctx) {
	let each_1_anchor;
	let each_value_3 = Object(/*catgPosts*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*Object, catgPosts, catgs*/ 513) {
				each_value_3 = Object(/*catgPosts*/ ctx[0]);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (46:8) {#if tag == name}
function create_if_block_2(ctx) {
	let a;
	let t0_value = /*name*/ ctx[17] + "";
	let t0;
	let t1;
	let a_href_value;
	let if_block = /*i*/ ctx[15] < /*tags*/ ctx[8].length - 1 && create_if_block_3(ctx);

	return {
		c() {
			a = element("a");
			t0 = text(t0_value);
			if (if_block) if_block.c();
			t1 = space();
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			if (if_block) if_block.l(a_nodes);
			t1 = claim_space(a_nodes);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = "tags/" + /*page*/ ctx[16]);
			attr(a, "class", "ml-0.5");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t0);
			if (if_block) if_block.m(a, null);
			append(a, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*tagsPosts*/ 2 && t0_value !== (t0_value = /*name*/ ctx[17] + "")) set_data(t0, t0_value);

			if (dirty & /*tagsPosts*/ 2 && a_href_value !== (a_href_value = "tags/" + /*page*/ ctx[16])) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d();
		}
	};
}

// (48:18) {#if i < tags.length - 1}
function create_if_block_3(ctx) {
	let t;

	return {
		c() {
			t = text(",");
		},
		l(nodes) {
			t = claim_text(nodes, ",");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (45:6) {#each Object(tagsPosts) as { page, name }}
function create_each_block_1(ctx) {
	let if_block_anchor;
	let if_block = /*tag*/ ctx[13] == /*name*/ ctx[17] && create_if_block_2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*tag*/ ctx[13] == /*name*/ ctx[17]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (44:4) {#each tags as tag, i}
function create_each_block(ctx) {
	let each_1_anchor;
	let each_value_1 = Object(/*tagsPosts*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*Object, tagsPosts, tags*/ 258) {
				each_value_1 = Object(/*tagsPosts*/ ctx[1]);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (55:0) {#if cardBody !== "skip"}
function create_if_block(ctx) {
	let p0;
	let t0;
	let article;
	let div;
	let p1;
	let t1;
	let a;
	let t2;

	return {
		c() {
			p0 = element("p");
			t0 = space();
			article = element("article");
			div = element("div");
			p1 = element("p");
			t1 = space();
			a = element("a");
			t2 = text("Continue Reading");
			this.h();
		},
		l(nodes) {
			p0 = claim_element(nodes, "P", { class: true });
			var p0_nodes = children(p0);
			p0_nodes.forEach(detach);
			t0 = claim_space(nodes);
			article = claim_element(nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			div = claim_element(article_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p1 = claim_element(div_nodes, "P", { class: true });
			children(p1).forEach(detach);
			t1 = claim_space(div_nodes);
			a = claim_element(div_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t2 = claim_text(a_nodes, "Continue Reading");
			a_nodes.forEach(detach);
			div_nodes.forEach(detach);
			article_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p0, "class", "text-base mb-8");
			attr(p1, "class", "mb-6");
			attr(a, "href", /*path*/ ctx[3]);
			attr(a, "class", "btn-outline hover:white");
			attr(div, "class", "mb-4");
			attr(article, "class", "border-0");
		},
		m(target, anchor) {
			insert(target, p0, anchor);
			p0.innerHTML = /*cardBody*/ ctx[10];
			insert(target, t0, anchor);
			insert(target, article, anchor);
			append(article, div);
			append(div, p1);
			append(div, t1);
			append(div, a);
			append(a, t2);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(p0);
			if (detaching) detach(t0);
			if (detaching) detach(article);
		}
	};
}

function create_fragment(ctx) {
	let li0;
	let a;
	let t0;
	let t1;
	let t2;
	let li1;
	let t3;
	let t4;
	let t5;
	let t6;
	let if_block2_anchor;
	let if_block0 = /*complete*/ ctx[2] && create_if_block_6(ctx);
	let if_block1 = /*complete*/ ctx[2] && create_if_block_1(ctx);
	let if_block2 = /*cardBody*/ ctx[10] !== "skip" && create_if_block(ctx);

	return {
		c() {
			li0 = element("li");
			a = element("a");
			t0 = text(/*author_name*/ ctx[5]);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			li1 = element("li");
			t3 = text("Updated: ");
			t4 = text(/*dateModified*/ ctx[7]);
			t5 = space();
			if (if_block1) if_block1.c();
			t6 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			this.h();
		},
		l(nodes) {
			li0 = claim_element(nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a = claim_element(li0_nodes, "A", { href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, /*author_name*/ ctx[5]);
			a_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t1 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t2 = claim_space(nodes);
			li1 = claim_element(nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			t3 = claim_text(li1_nodes, "Updated: ");
			t4 = claim_text(li1_nodes, /*dateModified*/ ctx[7]);
			li1_nodes.forEach(detach);
			t5 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t6 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
			this.h();
		},
		h() {
			attr(a, "href", /*author_url*/ ctx[4]);
			attr(li0, "class", "mr-2 my-0 inline-flex");
			attr(li1, "class", "mr-2 my-0 inline-flex");
		},
		m(target, anchor) {
			insert(target, li0, anchor);
			append(li0, a);
			append(a, t0);
			insert(target, t1, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t2, anchor);
			insert(target, li1, anchor);
			append(li1, t3);
			append(li1, t4);
			insert(target, t5, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t6, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*complete*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					if_block0.m(t2.parentNode, t2);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*complete*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(t6.parentNode, t6);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*cardBody*/ ctx[10] !== "skip") if_block2.p(ctx, dirty);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li0);
			if (detaching) detach(t1);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t2);
			if (detaching) detach(li1);
			if (detaching) detach(t5);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t6);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { post } = $$props,
		{ catgPosts } = $$props,
		{ tagsPosts } = $$props,
		{ complete } = $$props,
		{ skipbody } = $$props;

	let path = post.path;
	let author_url = post.author_url ?? post.fields.author.url;
	let author_name = post.author_name ?? post.fields.author.name;
	let dateCreated = post.dateCreated ?? post.fields.dateCreated;
	let dateModified = post.dateModified ?? post.fields.dateModified;
	let tags = post.tags ?? post.fields.tags;
	let catgs = post.catgs ?? post.fields.categories;

	let cardBody = skipbody
	? "skip"
	: get_description(post.fields.articleBody, 170);

	$$self.$$set = $$props => {
		if ("post" in $$props) $$invalidate(11, post = $$props.post);
		if ("catgPosts" in $$props) $$invalidate(0, catgPosts = $$props.catgPosts);
		if ("tagsPosts" in $$props) $$invalidate(1, tagsPosts = $$props.tagsPosts);
		if ("complete" in $$props) $$invalidate(2, complete = $$props.complete);
		if ("skipbody" in $$props) $$invalidate(12, skipbody = $$props.skipbody);
	};

	return [
		catgPosts,
		tagsPosts,
		complete,
		path,
		author_url,
		author_name,
		dateCreated,
		dateModified,
		tags,
		catgs,
		cardBody,
		post,
		skipbody
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			post: 11,
			catgPosts: 0,
			tagsPosts: 1,
			complete: 2,
			skipbody: 12
		});
	}
}

export default Component;
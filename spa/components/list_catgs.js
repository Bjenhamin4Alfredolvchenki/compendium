/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import PostMeta from './post_meta.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (18:6) {#each Posts as post}
function create_each_block(ctx) {
	let div1;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let div0;
	let h3;
	let a;
	let t1_value = /*post*/ ctx[6].title + "";
	let t1;
	let a_href_value;
	let t2;
	let ul;
	let li;
	let i;
	let t3;
	let postmeta;
	let t4;
	let current;

	postmeta = new PostMeta({
			props: {
				post: /*post*/ ctx[6],
				catgPosts: /*catgPosts*/ ctx[1],
				tagsPosts: /*tagsPosts*/ ctx[2],
				complete: /*complete*/ ctx[3],
				skipbody: /*skipbody*/ ctx[4]
			}
		});

	return {
		c() {
			div1 = element("div");
			img = element("img");
			t0 = space();
			div0 = element("div");
			h3 = element("h3");
			a = element("a");
			t1 = text(t1_value);
			t2 = space();
			ul = element("ul");
			li = element("li");
			i = element("i");
			t3 = space();
			create_component(postmeta.$$.fragment);
			t4 = space();
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { class: true, src: true, alt: true });
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h3 = claim_element(div0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			a = claim_element(h3_nodes, "A", { href: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, t1_value);
			a_nodes.forEach(detach);
			h3_nodes.forEach(detach);
			t2 = claim_space(div0_nodes);
			ul = claim_element(div0_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li = claim_element(ul_nodes, "LI", { class: true });
			var li_nodes = children(li);
			i = claim_element(li_nodes, "I", { class: true });
			children(i).forEach(detach);
			li_nodes.forEach(detach);
			t3 = claim_space(ul_nodes);
			claim_component(postmeta.$$.fragment, ul_nodes);
			ul_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t4 = claim_space(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(img, "class", "inline-block object-cover rounded-md w-28 h-28");
			if (img.src !== (img_src_value = "assets/posts/" + /*post*/ ctx[6].img_src)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*post*/ ctx[6].img_alt);
			attr(a, "href", a_href_value = /*post*/ ctx[6].path);
			attr(h3, "class", "header my-0 text-xl md:text-2xl");
			attr(i, "class", "las la-user-astronaut text-lg");
			attr(li, "class", "mx-0 -mt-1 text-meta inline-flex");
			attr(ul, "class", "text-meta flex flex-wrap");
			attr(div0, "class", "inline-block ml-2");
			attr(div1, "class", "flex items-center my-4");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, img);
			append(div1, t0);
			append(div1, div0);
			append(div0, h3);
			append(h3, a);
			append(a, t1);
			append(div0, t2);
			append(div0, ul);
			append(ul, li);
			append(li, i);
			append(ul, t3);
			mount_component(postmeta, ul, null);
			append(div1, t4);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*Posts*/ 32 && img.src !== (img_src_value = "assets/posts/" + /*post*/ ctx[6].img_src)) {
				attr(img, "src", img_src_value);
			}

			if (!current || dirty & /*Posts*/ 32 && img_alt_value !== (img_alt_value = /*post*/ ctx[6].img_alt)) {
				attr(img, "alt", img_alt_value);
			}

			if ((!current || dirty & /*Posts*/ 32) && t1_value !== (t1_value = /*post*/ ctx[6].title + "")) set_data(t1, t1_value);

			if (!current || dirty & /*Posts*/ 32 && a_href_value !== (a_href_value = /*post*/ ctx[6].path)) {
				attr(a, "href", a_href_value);
			}

			const postmeta_changes = {};
			if (dirty & /*Posts*/ 32) postmeta_changes.post = /*post*/ ctx[6];
			if (dirty & /*catgPosts*/ 2) postmeta_changes.catgPosts = /*catgPosts*/ ctx[1];
			if (dirty & /*tagsPosts*/ 4) postmeta_changes.tagsPosts = /*tagsPosts*/ ctx[2];
			if (dirty & /*complete*/ 8) postmeta_changes.complete = /*complete*/ ctx[3];
			if (dirty & /*skipbody*/ 16) postmeta_changes.skipbody = /*skipbody*/ ctx[4];
			postmeta.$set(postmeta_changes);
		},
		i(local) {
			if (current) return;
			transition_in(postmeta.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(postmeta.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(postmeta);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div1;
	let div0;
	let h2;
	let span;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	let each_value = /*Posts*/ ctx[5];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			h2 = element("h2");
			span = element("span");
			t0 = text("Category:");
			t1 = space();
			t2 = text(/*catg*/ ctx[0]);
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			span = claim_element(h2_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "Category:");
			span_nodes.forEach(detach);
			t1 = claim_space(h2_nodes);
			t2 = claim_text(h2_nodes, /*catg*/ ctx[0]);
			h2_nodes.forEach(detach);
			t3 = claim_space(div0_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "accent");
			attr(h2, "class", "header text-xl md:text-2xl lg:text-3xl my-5");
			attr(div0, "class", "mx-2 md:mx-6 my-1");
			attr(div1, "class", "flex-none lg:flex");
			attr(div2, "class", "rounded-xl overflow-hidden shadow-md bg-secondary mb-6");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			append(div0, h2);
			append(h2, span);
			append(span, t0);
			append(h2, t1);
			append(h2, t2);
			append(div0, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*catg*/ 1) set_data(t2, /*catg*/ ctx[0]);

			if (dirty & /*Posts, catgPosts, tagsPosts, complete, skipbody*/ 62) {
				each_value = /*Posts*/ ctx[5];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { catg } = $$props, { catgPosts } = $$props, { tagsPosts } = $$props;
	let { complete = true } = $$props;
	let { skipbody = true } = $$props;
	let Posts;

	$$self.$$set = $$props => {
		if ("catg" in $$props) $$invalidate(0, catg = $$props.catg);
		if ("catgPosts" in $$props) $$invalidate(1, catgPosts = $$props.catgPosts);
		if ("tagsPosts" in $$props) $$invalidate(2, tagsPosts = $$props.tagsPosts);
		if ("complete" in $$props) $$invalidate(3, complete = $$props.complete);
		if ("skipbody" in $$props) $$invalidate(4, skipbody = $$props.skipbody);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*catgPosts, catg*/ 3) {
			$: $$invalidate(5, Posts = Object.values(catgPosts.filter(key => key.name == catg)[0].posts));
		}
	};

	return [catg, catgPosts, tagsPosts, complete, skipbody, Posts];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			catg: 0,
			catgPosts: 1,
			tagsPosts: 2,
			complete: 3,
			skipbody: 4
		});
	}
}

export default Component;